#!/usr/bin/env python3
"""
Standalone CSV Visualization Script for VPR Dataset Analysis

This script takes a CSV file (generated by the VPR analyzer or any compatible CSV)
and creates visualizations using the existing VPRVisualizer class.

Usage:
    python csv_visualizer.py <csv_file> [options]

Examples:
    python csv_visualizer.py results.csv
    python csv_visualizer.py results.csv --save-plots
    python csv_visualizer.py results.csv --query-idx 5 --show-query
    python csv_visualizer.py results.csv --all-plots
"""

import argparse
import os
import sys
import pandas as pd
from visualization import VPRVisualizer


def validate_csv_structure(df):
    """
    Validate that the CSV has the expected structure for VPR visualization.
    
    Args:
        df: DataFrame to validate
        
    Returns:
        bool: True if valid, False otherwise
    """
    required_columns = ['query_image_path', 'utm_east', 'utm_north']
    
    # Check for basic required columns
    missing_columns = [col for col in required_columns if col not in df.columns]
    if missing_columns:
        print(f"Error: Missing required columns: {missing_columns}")
        return False
    
    # Check for at least one reference column
    reference_columns = [col for col in df.columns if 'reference_1_' in col]
    if not reference_columns:
        print("Warning: No reference columns found. Some visualizations may not work properly.")
    
    return True


def main():
    parser = argparse.ArgumentParser(
        description='Visualize VPR analysis results from CSV file',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  %(prog)s results.csv                    # Show all plots interactively
  %(prog)s results.csv --save-plots       # Save all plots to directory
  %(prog)s results.csv --query-idx 5      # Show specific query visualization
  %(prog)s results.csv --all-plots        # Show all available plots
        """
    )
    
    parser.add_argument('csv_file', help='Path to CSV file to visualize')
    parser.add_argument('--save-plots', action='store_true', 
                       help='Save all plots to a directory instead of showing them')
    parser.add_argument('--output-dir', default='vpr_plots', 
                       help='Directory to save plots (default: vpr_plots)')
    parser.add_argument('--query-idx', type=int, 
                       help='Show visualization for specific query index')
    parser.add_argument('--show-query', action='store_true',
                       help='Show query match visualization (requires --query-idx)')
    parser.add_argument('--all-plots', action='store_true',
                       help='Show all available plot types')
    parser.add_argument('--max-queries', type=int, default=100,
                       help='Maximum number of queries to show in UTM plot (default: 100)')
    parser.add_argument('--k', type=int, default=3,
                       help='Number of nearest neighbors to show in query visualization (default: 3)')
    
    args = parser.parse_args()
    
    # Check if CSV file exists
    if not os.path.exists(args.csv_file):
        print(f"Error: CSV file '{args.csv_file}' not found.")
        sys.exit(1)
    
    try:
        # Load CSV file
        print(f"Loading CSV file: {args.csv_file}")
        df = pd.read_csv(args.csv_file)
        print(f"Loaded {len(df)} rows from CSV file")
        
        # Validate CSV structure
        if not validate_csv_structure(df):
            print("CSV file structure validation failed.")
            sys.exit(1)
        
        # Create visualizer
        print("Creating visualizer...")
        visualizer = VPRVisualizer(df)
        
        # Handle different visualization modes
        if args.save_plots:
            # Save all plots to directory
            print(f"Saving all plots to directory: {args.output_dir}")
            visualizer.save_all_plots(args.output_dir)
            print("All plots saved successfully!")
            
        elif args.show_query:
            # Show specific query visualization
            if args.query_idx is None:
                print("Error: --query-idx is required when using --show-query")
                sys.exit(1)
            
            if args.query_idx < 0 or args.query_idx >= len(df):
                print(f"Error: Query index {args.query_idx} is out of range (0-{len(df)-1})")
                sys.exit(1)
            
            # Check if query has reference images
            if not visualizer._has_reference_images(args.query_idx):
                print(f"Error: Query {args.query_idx} has no reference images to visualize")
                sys.exit(1)
            
            print(f"Showing visualization for query {args.query_idx}")
            fig, axes = visualizer.visualize_query_matches(args.query_idx, k=args.k)
            import matplotlib.pyplot as plt
            plt.show()
            
        elif args.all_plots:
            # Show all available plots
            print("Showing all available plots...")
            import matplotlib.pyplot as plt
            
            # UTM coordinates plot
            print("1. UTM Coordinates Plot")
            fig1, _ = visualizer.plot_utm_coordinates(max_queries=args.max_queries)
            plt.show()
            
            # Distance distribution
            print("2. Distance Distribution")
            fig2, _ = visualizer.plot_distance_distribution()
            plt.show()
            
            # Performance metrics
            print("3. Performance Metrics")
            fig3, _ = visualizer.plot_performance_metrics()
            plt.show()
            
            # Sample query visualizations
            print("4. Sample Query Visualizations")
            queries_shown = 0
            for i in range(len(df)):
                if queries_shown >= 3:
                    break
                    
                if visualizer._has_reference_images(i):
                    print(f"   Showing query {i}")
                    fig4, _ = visualizer.visualize_query_matches(i, k=args.k)
                    plt.show()
                    queries_shown += 1
                else:
                    print(f"   Skipping query {i} - no reference images")
            
        else:
            # Default: show UTM coordinates plot
            print("Showing UTM coordinates plot (default)")
            print("Use --all-plots to see all available visualizations")
            print("Use --save-plots to save all plots to a directory")
            fig, _ = visualizer.plot_utm_coordinates(max_queries=args.max_queries)
            import matplotlib.pyplot as plt
            plt.show()
        
        print("Visualization complete!")
        
    except Exception as e:
        print(f"Error during visualization: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
